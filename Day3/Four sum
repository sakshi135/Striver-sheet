#include <bits/stdc++.h> 
string fourSum(vector<int> nums, int target, int n) {
    // Write your code here.
   
//     sort(arr.begin(),arr.end());
//     vector<vector<int>>ans;

//     for(int i=0;i<n;i++){
//         for(int j=i+1;j<n;j++){
//             int new_target=target-arr[i]-arr[j];
//             int x=j+1,y=n-1;
//             while(x<y){
//                 int sum=arr[x]+arr[y];
                
//                  if(sum<new_target)x++;
//                 else if(sum>new_target)y--;
//                 else
//                     return "Yes";
//             }
//         }
//     }
 
//     return "No";
//     std::vector<std::vector<int>> result;
//     int n = nums.size();
    if (n < 4) {
        return "No";
    }

    std::sort(nums.begin(), nums.end());
    for (int i = 0; i < n-3; ++i) {
        /* Conditions for pruning */
        // target too small, no point in continuing
        if (target <= 0 and nums[i] > 0) break;
        // nums[i] has become too large, no point in continuing
        if (nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target) break;
        // nums[i] is so small, even the largest elements cannot help reach the sum
        if (nums[i] + nums[n-3] + nums[n-2] + nums[n-1] < target) continue; 
         // skip duplicates
        if (i > 0 and nums[i] == nums[i-1]) continue;

        /* Now explore further */
        for (int j = i+1; j < n - 2; ++j) {
            /* Some more pruning */
            // nums[j] has become too large, no point in continuing
            if (nums[i] + nums[j] + nums[j+1] + nums[j+2] > target) break;
            // nums[j] is so small, even the largest elements cannot help reach the sum
            if (nums[i] + nums[j] + nums[n-2] + nums[n-1] < target) continue; 
            if (j > i+1 and nums[j] == nums[j-1]) continue; // skip duplicates

            /* Explore the solution space */
            int left = j+1, right = n-1;
            while (left < right) {
                int sum = nums[i] + nums[j] + nums[left] + nums[right];
                if (sum == target) {
                return "Yes";
                    int last_left = nums[left], last_right = nums[right];
                    while (left < right and nums[left] == last_left) ++left;
                    while (left < right and nums[right] == last_right) --right;
                } else if (sum < target) {
                    ++left;
                } else {
                    --right;
                }
            }
        }
    }
    return "No";
}
