#include<unordered_map>
class LRUCache
{
public:
 
    class Node{
        public:
        int key;
        int val;
        Node*next;
        Node*prev;
        Node(int _key,int _val){
            key=_key;
            val=_val;
        }
    };
    Node*head=new Node(-1,-1);
    Node*tail=new Node(-1,-1);
    int cap;
    unordered_map<int,Node*>m;
    LRUCache(int capacity)
    {
        // Write your code here
        cap=capacity;
        head->next=tail;
        tail->prev=head;
        
    }
void deletenode(Node*del){
    del->prev->next=del->next;
    del->next->prev=del->prev;
}
    void addnode(Node*add){
        add->next=head->next;
        add->prev=head;
        head->next=add;
        add->next->prev=add;
    }
    int get(int key_)
    {
        // Write your code here
        if(m.find(key_)!=m.end()){
            Node*resnode=m[key_];
            int res=resnode->val;
            m.erase(key_);
            deletenode(resnode);
            addnode(resnode);
            m[key_]=head->next;
            return res;
            
        }
        return -1;
        
    }

    void put(int key_, int value)
    {
        // Write your code here
        if(m.find(key_)!=m.end()){
            Node*existingnode=m[key_];
            m.erase(key_);
            deletenode(existingnode);
        }
        if(m.size()==cap){
           m.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new Node(key_,value));
        m[key_]=head->next;
    }
};
