#include<bits/stdc++.h>
bool bfs(int node,vector<int>adj[],vector<int>&color){
    queue<int>q;
    q.push(node);
        color[node]=1;
    while(!q.empty()){
        int t=q.front();q.pop();
        for(auto it:adj[t]){
            if(color[it]==-1){
                color[it]=1-color[t];
                q.push(it);
            }
            else if(color[it]==color[t])return false;
        }
    }
    return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
   int n =edges.size();
    vector<int>adj[n];
    for(int i=0;i<edges.size();i++){
        for(int j=0;j<edges.size();j++){
            if(edges[i][j]==1){adj[i].push_back(j);
                              adj[j].push_back(i);}
        }
    }
    vector<int>color(n,-1);
    for(int i=0;i<n;i++){
        if(color[i]==-1)
        {if( !bfs(i,adj,color))return false;
        }
    }
    return true;
}
