void dfs(vector<int>adj[],int i,vector<int> &res,vector<bool>&vis){
    if(vis[i])return ;
        vis[i]=true;
        res.push_back(i);
        for(auto t:adj[i]){
            if(!vis[t])
            dfs(adj,t,res,vis);}
    
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    vector<vector<int>> v;
   
    vector<int> adj[V];
    for(int i=0;i<edges.size();i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    vector<bool>vis(V,false);
    for(int i=0;i<V;i++){
        if(!vis[i]){
             vector<int> res;
            dfs(adj,i,res,vis);
            v.push_back(res);
           
            }
    }
    return v;
}
