double findNthRootOfM(int n, long long m) {
	// Write your code here.
//     double low=1;
//     double high=n;
//     double eps=1e-7;
//     double mid;
//     while(abs(high-low)>=eps){
//          mid=(high+low)/2;
//         if(pow(mid,n)>m)
//             high=mid;
//         else low=mid;
//     }
//     return high;
    
//     double low=1,high=m;
//      double epsilon = 0.00000001;
 
//     // Do binary search
//     double guess = (low + high) / 2;
//     while (abs((pow(guess, n) )- m) >= epsilon)
//     {
//         if (pow(guess, n) > m)
//         {
//             high = guess;
//         }
//         else
//         {
//             low = guess;
//         }
//         guess = (low + high) / 2;
//     }
//     return guess;
       double error = 1e-7;

    // Difference between the current answer, and the answer
    // in next iteration, which we take as big as possible initially.
    double diff = 1e18;

    // Guessed answer value
    double xk = 2;

    // We keep on finding the precise answer till the difference between
    // answer of two consecutive iteration become less than 10^(-7).
    while (diff > error) {

        // Answer value in the next iteration.
        double xk_1 = (pow(xk, n) * (n - 1) + m) / (n * pow(xk, n - 1));

        // Difference of answer in consecutive states updated.
        diff = abs(xk - xk_1);

        // Updating the current answer with the answer of next iteration.
        xk = xk_1;
    }

    // Returning the nthRootOfM with precision upto 6 decimal places
    // which is xk.
    return xk;
 
}
