/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
#include<bits/stdc++.h>
class BSTiterator
{
    public:vector<int> v;
 int i;
    void inorder(TreeNode<int>*node){
        if(!node)return ;
        inorder(node->left);
        v.push_back(node->data);
        inorder(node->right);
    }
    BSTiterator(TreeNode<int> *node)
    {
        // write your code here
        i=0;
      inorder(node);   
       
    }

    int next()
    {
        // write your code here
        return v[i++];
    }

    bool hasNext()
    {
        // write your code here
        if(i<v.size())return true;
        return false;
    }
};


/*
    Your BSTIterator object will be instantiated and called as such:
    BSTIterator iterator(root);
    while(iterator.hasNext())
    {
       print(iterator.next());
    }
*/
